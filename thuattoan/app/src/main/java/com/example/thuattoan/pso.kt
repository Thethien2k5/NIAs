//package com.example.thuattoan
//
//import androidx.compose.foundation.Canvas
//import androidx.compose.foundation.background
//import androidx.compose.foundation.gestures.detectTapGestures
//import androidx.compose.foundation.layout.*
//import androidx.compose.material3.*
//import androidx.compose.runtime.*
//import androidx.compose.ui.Alignment
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.geometry.Offset
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.input.pointer.pointerInput
//import androidx.compose.ui.layout.onSizeChanged
//import androidx.compose.ui.text.font.FontWeight
//import androidx.compose.ui.unit.IntSize
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import kotlinx.coroutines.isActive
//import kotlin.math.pow
//import kotlin.math.sqrt
//import kotlin.random.Random
//
//// ===== PSO CONFIGURATION (C·∫•u h√¨nh cu·ªëi c√πng cho hi·ªáu ·ª©ng b·∫ßy ƒë√†n t·ª± nhi√™n) =====
//object PSOConfig {
//    const val PARTICLE_COUNT = 150
//    const val C1 = 0.05f                 // L·ª±c h√∫t v·ªÅ kinh nghi·ªám c√° nh√¢n (pBest)
//    const val C2 = 0.1f                  // L·ª±c h√∫t v·ªÅ m·ª•c ti√™u chung (gBest)
//    const val MAX_VELOCITY = 15f         // V·∫≠n t·ªëc t·ªëi ƒëa
//    const val PARTICLE_SIZE = 70f        // K√≠ch th∆∞·ªõc h·∫°t
//
//    // ‚ú® QUY T·∫ÆC M·ªöI: S·ª∞ T√ÅCH BI·ªÜT (SEPARATION) ‚ú®
//    const val SEPARATION_DISTANCE = 50f  // Kho·∫£ng c√°ch m√† c√°c h·∫°t b·∫Øt ƒë·∫ßu ƒë·∫©y nhau ra
//    const val SEPARATION_FORCE = 0.5f    // ƒê·ªô m·∫°nh c·ªßa l·ª±c ƒë·∫©y
//}
//
//// ===== PARTICLE CLASS - L·ªõp ƒë·∫°i di·ªán cho m·ªôt h·∫°t =====
//data class Particle(
//    val id: Int,
//    var position: Offset,
//    var velocity: Offset = Offset(
//        x = (Random.nextFloat() - 0.5f) * 5f,
//        y = (Random.nextFloat() - 0.5f) * 5f
//    )
//) {
//    /**
//     * C·∫≠p nh·∫≠t v·∫≠n t·ªëc V·ªöI LOGIC B·∫¶Y ƒê√ÄN HO√ÄN CH·ªàNH
//     */
//    fun updateVelocity(
//        globalBestPosition: Offset,
//        otherParticles: List<Particle>
//    ) {
//        // L·ª±c h√∫t v·ªÅ m·ª•c ti√™u chung
//        val socialForce = (globalBestPosition - position) * PSOConfig.C2 * Random.nextFloat()
//
//        // ‚ú® T√çNH TO√ÅN L·ª∞C ƒê·∫®Y T√ÅCH BI·ªÜT ‚ú®
//        var separationForce = Offset.Zero
//        var neighborsCount = 0
//        for (other in otherParticles) {
//            if (other.id != this.id) {
//                val distance = (position - other.position).getDistance()
//                if (distance > 0 && distance < PSOConfig.SEPARATION_DISTANCE) {
//                    // T√≠nh vector ƒë·∫©y ra xa kh·ªèi h√†ng x√≥m
//                    val pushVector = position - other.position
//                    separationForce += pushVector / (distance * distance) // L·ª±c ƒë·∫©y m·∫°nh h∆°n khi ·ªü g·∫ßn
//                    neighborsCount++
//                }
//            }
//        }
//        if (neighborsCount > 0) {
//            separationForce /= neighborsCount.toFloat()
//            separationForce *= PSOConfig.SEPARATION_FORCE
//        }
//        // K·∫øt h·ª£p c√°c l·ª±c
//        // V·∫≠n t·ªëc m·ªõi = V·∫≠n t·ªëc c≈© + L·ª±c h√∫t + L·ª±c ƒë·∫©y
//        var newVelocity = velocity + socialForce + separationForce
//
//        // Gi·ªõi h·∫°n t·ªëc ƒë·ªô
//        if (newVelocity.getDistance() > PSOConfig.MAX_VELOCITY) {
//            newVelocity = newVelocity.normalize() * PSOConfig.MAX_VELOCITY
//        }
//        velocity = newVelocity
//    }
//
//    // C·∫≠p nh·∫≠t v·ªã tr√≠ d·ª±a tr√™n v·∫≠n t·ªëc
//    fun updatePosition(maxWidth: Float, maxHeight: Float) {
//        position += velocity
//        // N·∫£y l·∫°i khi ch·∫°m bi√™n
//        if (position.x < 0 || position.x > maxWidth) {
//            velocity = Offset(-velocity.x, velocity.y)
//            position = position.copy(x = position.x.coerceIn(0f, maxWidth))
//        }
//        if (position.y < 0 || position.y > maxHeight) {
//            velocity = Offset(velocity.x, -velocity.y)
//            position = position.copy(y = position.y.coerceIn(0f, maxHeight))
//        }
//    }
//}
//
//// ===== SWARM CLASS - L·ªõp qu·∫£n l√Ω b·∫ßy ƒë√†n =====
//class Swarm(private val width: Float, private val height: Float) {
//    val particles = MutableList(PSOConfig.PARTICLE_COUNT) { id ->
//        Particle(
//            id = id,
//            position = Offset(
//                x = Random.nextFloat() * width,
//                y = Random.nextFloat() * height
//            )
//        )
//    }
//
//    // gBest ch√≠nh l√† m·ª•c ti√™u ng∆∞·ªùi d√πng ch·ªçn.
//    var globalBestPosition by mutableStateOf(Offset(width / 2, height / 2))
//        private set
//
//    var iteration = 0
//
//    // ƒê·∫∑t m·ª•c ti√™u m·ªõi cho b·∫ßy ƒë√†n
//    fun setTarget(newTarget: Offset) {
//        globalBestPosition = newTarget
//    }
//
//    // V√≤ng l·∫∑p c·∫≠p nh·∫≠t ch√≠nh
//    fun update() {
//        // T·∫°o m·ªôt b·∫£n sao c·ªßa danh s√°ch h·∫°t ƒë·ªÉ tr√°nh l·ªói khi duy·ªát v√† s·ª≠a ƒë·ªïi
//        val currentParticles = particles.toList()
//        particles.forEach { particle ->
//            // C·∫≠p nh·∫≠t v·∫≠n t·ªëc, truy·ªÅn v√†o c·∫£ danh s√°ch ƒë·ªÉ t√≠nh to√°n l·ª±c ƒë·∫©y
//            particle.updateVelocity(globalBestPosition, currentParticles)
//            // Di chuy·ªÉn
//            particle.updatePosition(width, height)
//        }
//        iteration++
//    }
//}
//
//// ===== MAIN APP =====
//@Composable
//fun PSOApp() {
//    MaterialTheme {
//        Surface(modifier = Modifier.fillMaxSize()) {
//            PSOVisualization()
//        }
//    }
//}
//
//@Composable
//fun PSOVisualization() {
//    var canvasSize by remember { mutableStateOf(IntSize.Zero) }
//
//    val swarm = remember(canvasSize) {
//        if (canvasSize != IntSize.Zero) {
//            Swarm(canvasSize.width.toFloat(), canvasSize.height.toFloat())
//        } else {
//            null
//        }
//    }
//
//    var frameTime by remember { mutableStateOf(0L) }
//
//    LaunchedEffect(swarm) {
//        if (swarm == null) return@LaunchedEffect
//        while (isActive) {
//            withFrameNanos { newTime ->
//                swarm.update()
//                frameTime = newTime
//            }
//        }
//    }
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .background(Color(0xFF0D1117))
//    ) {
//        Box(
//            modifier = Modifier
//                .weight(1f)
//                .fillMaxWidth()
//                .onSizeChanged { canvasSize = it }
//                .pointerInput(swarm) {
//                    detectTapGestures { offset ->
//                        swarm?.setTarget(offset)
//                    }
//                }
//        ) {
//            if (swarm != null) {
//                key(frameTime) {
//                    SwarmCanvas(swarm = swarm)
//                }
//            } else {
//                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
//                    CircularProgressIndicator()
//                }
//            }
//        }
//
//        if (swarm != null) {
//            InfoPanel(swarm = swarm)
//        }
//    }
//}
//
//@Composable
//fun SwarmCanvas(swarm: Swarm) {
//    Canvas(modifier = Modifier.fillMaxSize()) {
//        val targetPos = swarm.globalBestPosition
//        // V·∫Ω m·ª•c ti√™u
//        drawCircle(
//            color = Color(0xFF30C04F),
//            radius = 25f,
//            center = targetPos,
//            alpha = 0.5f
//        )
//        drawLine(
//            color = Color.White,
//            start = Offset(targetPos.x - 18f, targetPos.y),
//            end = Offset(targetPos.x + 18f, targetPos.y),
//            strokeWidth = 3f
//        )
//        drawLine(
//            color = Color.White,
//            start = Offset(targetPos.x, targetPos.y - 18f),
//            end = Offset(targetPos.x, targetPos.y + 18f),
//            strokeWidth = 3f
//        )
//
//        // V·∫Ω c√°c h·∫°t
//        swarm.particles.forEach { particle ->
//            // M√†u s·∫Øc d·ª±a tr√™n t·ªëc ƒë·ªô, t·ªëc ƒë·ªô c√†ng cao m√†u c√†ng n√≥ng
//            val speed = particle.velocity.getDistance()
//            val ratio = (speed / PSOConfig.MAX_VELOCITY).coerceIn(0f, 1f)
//            val color = lerp(Color(0xFF87CEEB), Color(0xFFF08080), ratio) // Xanh -> ƒê·ªè
//            drawCircle(
//                color = color,
//                radius = PSOConfig.PARTICLE_SIZE / 2,
//                center = particle.position
//            )
//        }
//    }
//}
//
//@Composable
//fun InfoPanel(swarm: Swarm) {
//    Surface(
//        modifier = Modifier.fillMaxWidth(),
//        color = Color(0xFF161B22),
//        tonalElevation = 4.dp
//    ) {
//        Column(modifier = Modifier.padding(16.dp)) {
//            Text(
//                text = "üêù PARTICLE SWARM OPTIMIZATION",
//                color = Color.White,
//                fontSize = 18.sp,
//                fontWeight = FontWeight.Bold
//            )
//            Text(
//                text = "Nh·∫•p v√†o m√†n h√¨nh ƒë·ªÉ ƒë·∫∑t m·ª•c ti√™u m·ªõi cho b·∫ßy ƒë√†n",
//                color = Color.Gray,
//                fontSize = 12.sp
//            )
//            Spacer(modifier = Modifier.height(16.dp))
//            Row(
//                modifier = Modifier.fillMaxWidth(),
//                horizontalArrangement = Arrangement.SpaceAround
//            ) {
//                InfoItem("V√≤ng l·∫∑p", "${swarm.iteration}")
//                InfoItem("S·ªë H·∫°t", "${PSOConfig.PARTICLE_COUNT}")
//            }
//        }
//    }
//}
//
//@Composable
//fun InfoItem(label: String, value: String) {
//    Column(horizontalAlignment = Alignment.CenterHorizontally) {
//        Text(text = value, color = Color.White, fontSize = 20.sp, fontWeight = FontWeight.Bold)
//        Text(text = label, color = Color.LightGray, fontSize = 12.sp)
//    }
//}
//
//fun Offset.normalize(): Offset {
//    val len = this.getDistance()
//    return if (len > 0) this / len else this
//}
//
//fun lerp(start: Color, stop: Color, fraction: Float): Color {
//    val a = start.alpha + (stop.alpha - start.alpha) * fraction
//    val r = start.red + (stop.red - start.red) * fraction
//    val g = start.green + (stop.green - start.green) * fraction
//    val b = start.blue + (stop.blue - start.blue) * fraction
//    return Color(red = r, green = g, blue = b, alpha = a)
//}